{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","None","sortField","setSortField","reversed","setReversed","visibleGoods","goods","preparedGoods","sort","good1","good2","Alphabet","localeCompare","Length","length","reverse","getPreparedGoods","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,4EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAuCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAASI,MAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCH,oBAAS,GAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KACMC,EA7BR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,UAAWE,EACb,EADaA,SAEPI,EAAa,YAAOD,GAmB1B,OAjBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAASe,SACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKd,EAASiB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAKXX,GACFI,EAAcQ,UAGTR,EAMcS,CACnBnB,EACA,CAAEI,YAAWE,aAOf,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMhB,EAAaN,EAASe,WACrCQ,KAAK,SACLF,UAAWG,IAAG,SAAU,UACtB,CAAE,WAAYnB,IAAcL,EAASe,WAJzC,iCASA,wBACEO,QAAS,kBAAMhB,EAAaN,EAASiB,SACrCM,KAAK,SACLF,UAAWG,IAAG,SAAU,aACtB,CAAE,WAAYnB,IAAcL,EAASiB,SAJzC,4BASA,wBACEK,QA1Bc,WACpBd,GAAaD,IA0BPgB,KAAK,SACLF,UAAWG,IAAG,SAAU,aAAc,CAAE,YAAajB,IAHvD,sBAQEF,GAAaE,IAEX,wBACEe,QAAS,WACPhB,EAAaN,EAASI,MACtBI,GAAY,IAEde,KAAK,SACLF,UAAU,4BANZ,sBAYN,6BACGZ,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YC/GlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2df56153.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport cn from 'classnames';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  None,\n  Alphabet,\n  Length,\n}\n\ntype Goods = typeof goodsFromServer;\n\ntype PreparedGoodsOptions = {\n  sortField: SortType,\n  reversed: boolean,\n};\n\nfunction getPreparedGoods(\n  goods: Goods,\n  { sortField, reversed }: PreparedGoodsOptions,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.Alphabet:\n          return good1.localeCompare(good2);\n        case SortType.Length:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortType.None);\n  const [reversed, setReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    { sortField, reversed },\n  );\n\n  const handleReverse = () => {\n    setReversed(!reversed);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SortType.Alphabet)}\n          type=\"button\"\n          className={cn('button', 'is-info',\n            { 'is-light': sortField !== SortType.Alphabet })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SortType.Length)}\n          type=\"button\"\n          className={cn('button', 'is-success',\n            { 'is-light': sortField !== SortType.Length })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={handleReverse}\n          type=\"button\"\n          className={cn('button', 'is-warning', { 'is-light': !reversed })}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reversed)\n          && (\n            <button\n              onClick={() => {\n                setSortField(SortType.None);\n                setReversed(false);\n              }}\n              type=\"button\"\n              className=\"button is-danger is-light\"\n            >\n              Reset\n            </button>\n          )}\n      </div>\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}